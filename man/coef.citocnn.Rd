% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cnn.R
\name{coef.citocnn}
\alias{coef.citocnn}
\title{Retrieve parameters of a fitted CNN model}
\usage{
\method{coef}{citocnn}(object, ...)
}
\arguments{
\item{object}{A model created by \code{\link{cnn}}.}

\item{...}{Additional arguments (currently not used).}
}
\value{
A list with up to three components:
\itemize{
\item \code{net_parameters}: A list of the model's weights and biases for the currently used model epoch.
\item \code{net_buffers}: A list of buffers (e.g., running statistics) for the currently used model epoch.
\item \code{loss_parameters}: A list of the loss function's parameters for the currently used model epoch.
}
}
\description{
This function returns the list of parameters (weights and biases) and buffers (e.g. running mean and variance of batch normalization layers) currently in use by the neural network model created using the \code{\link{cnn}} function.
}
\examples{
\donttest{
if(torch::torch_is_installed()){
library(cito)

device <- ifelse(torch::cuda_is_available(), "cuda", "cpu")

set.seed(222)

## Data
shapes <- cito:::simulate_shapes(320, 28)
X <- shapes$data
Y <- shapes$labels

## Architecture
architecture <- create_architecture(conv(5), maxPool(), conv(5), maxPool(), linear(10))

## Build and train network
cnn.fit <- cnn(X, Y, architecture, loss = "cross-entropy",
               epochs = 50, validation = 0.1, lr = 0.05, device=device)

# Weights of neural network
coef(cnn.fit)
}
}
}
